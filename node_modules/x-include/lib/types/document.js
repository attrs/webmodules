var docloader = require('../util/document-loader.js');
var VirtualDocument = require('../util/virtual-document.js');

function isNode(o){
  return (typeof(Node) === "object") ? o instanceof Node : 
    (o && typeof(o.nodeType) === 'number' && typeof(o.nodeName) === 'string');
}

function append(target, nodes) {
  [].forEach.call(nodes, function(node) {
    if( node.getAttribute && node.getAttribute('data-exclude') !== null ) {
      return;
    } else if( ~['HTML', 'HEAD', 'BODY'].indexOf(node.tagName) ) {
      append(target, [].slice.call(node.childNodes));
    } else {
      target.appendChild(node);
    }
  });
}

var cache = {};

var DocumentLoader = {
  load: function(options, done) {
    if( isNode(options.src) ) return done(null, options.src);
    
    var src = options.src;
    var singleton = options.singleton === false ? false : true;
    var evalScripts = options.evalScripts === true ? true : false;
    
    if( singleton && cache[src] ) return done(null, cache[src]);
    
    docloader.load({
      src: src,
      evalScripts: evalScripts
    }, function(err, doc) {
      if( err ) return done(err);
      if( singleton ) cache[src] = doc;
      done(null, doc);
    });
  },
  render: function(options, done) {
    var source = options.loaded;
    var target = options.target;
    var changeTitle = options.changeTitle;
    var fixLinks = options.fixLinks === false ? false : true;
    var nodes = options.selector ? source.querySelectorAll(options.selector) : [source.documentElement || source];
    var documentElement = target.ownerDocument.createElement('div');
    var documentTitle = source.title;
    
    //console.log('source', source, source.URL, source.title);
    //console.log('target', target);
    // append loaded document elements to fragment
    [].forEach.call(nodes, function(node) {
      function visit(node) {
        if( !node.childNodes.length ) return [node];
      
        var children = [].slice.call(node.childNodes);
        children.forEach(function(child) {
          node.removeChild(child);
        });
        children.forEach(function(child) {
          if( ~['META', 'TITLE'].indexOf(child.tagName) ) {
            return;
          } else if( child.tagName === 'TITLE' ) {
            var title = child.textContent || child.innerText;
          } else if( ~['SCRIPT', 'IMG'].indexOf(child.tagName) ) {
            if( child.src && fixLinks ) child.setAttribute('src', child.src);
            append(node, [child]);
          } else {
            append(node, visit(child));
          }
        });
        return [node];
      };
      
      append(documentElement, visit(node.cloneNode(true)));
    });
    
    var vdoc = VirtualDocument(documentElement, source.URL);
    docloader.executeDocument(vdoc);
    
    target.innerHTML = '';
    target.appendChild(vdoc.documentElement);
    if( changeTitle && documentTitle ) document.title = documentTitle;
    
    // fire DOMContentLoaded
    docloader.readyDocument(vdoc);
    docloader.finishDocument(vdoc);
    
    done();
  }
};

module.exports = DocumentLoader;