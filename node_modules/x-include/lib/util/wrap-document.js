function WrapDocument(doc, url) {
  if( Object.defineProperty ) {
    Object.defineProperty(this, 'URL', {
      get: function() {
        return url || doc.URL;
      }
    });
    
    Object.defineProperty(this, 'baseURI', {
      get: function() {
        return url || doc.baseURI;
      }
    });
    
    Object.defineProperty(this, 'documentURI', {
      get: function() {
        return url || doc.documentURI;
      }
    });
    
    Object.defineProperty(this, 'nodeType', {
      get: function() {
        return doc.nodeType;
      }
    });
    
    Object.defineProperty(this, 'documentElement', {
      get: function() {
        return doc.documentElement;
      }
    });
    
    Object.defineProperty(this, 'currentScript', {
      get: function() {
        return this._currentScript || doc.currentScript;
      },
      set: function(value) {
        this._currentScript = value;
      }
    });
  } else {
     // IE <= 8
    if( url ) {
      this.URL = url;
      this.baseURI = url;
      this.documentURI = url;
    }
    this.currentScript = null;
    this.documentElement = doc.documentElement;
  }
  
  // event wrapping
  var self = this;
  var listeners = [];
  this.createEvent = function() {
    return doc.createEvent.apply(doc, arguments);
  };
  
  this.createElement = function() {
    return doc.createElement.apply(doc, arguments);
  };
  
  this.addEventListener = function(type, listener, capture) {
    if( type === 'DOMContentLoaded' ) {
      if( typeof listener !== 'function' ) throw new TypeError();
      listeners.push(listener);
    } else {
      doc.addEventListener(type, listener, capture);
    }
  };
  
  this.removeEventListener = function(type, listener, capture) {
    if( type === 'DOMContentLoaded' ) {
      if( typeof listener !== 'function' ) throw new TypeError();
      listeners.splice(listeners.indexOf(listener), 1);
      for(var i;~(i = listeners.indexOf(listener));) listeners.splice(i, 1)
    } else {
      doc.removeEventListener(type, listener, capture);
    }
  };
  
  this.dispatchEvent = function(event) {
    if( event.type === 'DOMContentLoaded' ) {
      var stop = false;
      event.stopPropagation = stopImmediatePropagation = function() {
        stop = true;
      };
      
      listeners.forEach(function(listener) {
        if( !stop ) listener.call(self, event);
      });
      return event.defaultPrevented ? false : true;
    }
    return doc.dispatchEvent(event);
  };
  
  this.querySelector = function(selector) {
    return doc.querySelector(selector);
  };
  
  this.querySelectorAll = function(selector) {
    return doc.querySelectorAll(selector);
  };
};

module.exports = function(document, URL) {
  WrapDocument.prototype = window.document;
  return new WrapDocument(document, URL);
};