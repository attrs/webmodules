function VirtualDocument(documentElement, url) {
  var doc = this.__proto__;
  var isReady = false;
  var isLoaded = false;
  
  // wrapping properties
  if( Object.defineProperty ) {
    Object.defineProperty(this, 'URL', {
      get: function() {
        return url || doc.URL;
      }
    });
    
    Object.defineProperty(this, 'baseURI', {
      get: function() {
        return url || doc.baseURI;
      }
    });
    
    Object.defineProperty(this, 'documentURI', {
      get: function() {
        return url || doc.documentURI;
      }
    });
    
    Object.defineProperty(this, 'documentElement', {
      get: function() {
        return documentElement;
      }
    });
    
    Object.defineProperty(this, 'readyState', {
      get: function() {
        return doc.readyState;
      }
    });
    
    Object.defineProperty(this, 'nodeType', {
      get: function() {
        return doc.nodeType;
      }
    });
    
    Object.defineProperty(this, 'body', {
      get: function() {
        return isReady ? documentElement : null;
      }
    });
    
    Object.defineProperty(this, 'currentScript', {
      get: function() {
        return this._currentScript || doc.currentScript;
      },
      set: function(value) {
        this._currentScript = value;
      }
    });
  } else {
     // IE <= 8
    if( url ) {
      this.URL = url;
      this.baseURI = url;
      this.documentURI = url;
    }
    this.currentScript = null;
    this.body = null;
    this.documentElement = documentElement;
  }
  
  // wrapping methods
  this.createEvent = function() {
    return doc.createEvent.apply(doc, arguments);
  };
  
  this.createElement = function() {
    return doc.createElement.apply(doc, arguments);
  };
  
  // wrapping events
  var self = this;
  var listenermap = {};
  
  this.addEventListener = function(type, listener, capture) {
    if( ~['DOMContentLoaded', 'load'].indexOf(type) ) {
      if( typeof listener !== 'function' ) throw new TypeError();
      var listeners = listenermap[type] = listenermap[type] || [];
      listeners.push(listener);
    } else {
      doc.addEventListener(type, listener, capture);
    }
  };
  
  this.removeEventListener = function(type, listener, capture) {
    if( ~['DOMContentLoaded', 'load'].indexOf(type) ) {
      if( typeof listener !== 'function' ) throw new TypeError();
      
      var listeners = listenermap[type];
      if( !listeners ) return;
      listeners.splice(listeners.indexOf(listener), 1);
      for(var i;~(i = listeners.indexOf(listener));) listeners.splice(i, 1)
    } else {
      doc.removeEventListener(type, listener, capture);
    }
  };
  
  var self = this;
  this.dispatchEvent = function(event) {
    if( ~['DOMContentLoaded', 'load'].indexOf(event.type) ) {
      if( event.type === 'DOMContentLoaded' ) isReady = true, self.body = documentElement;
      if( event.type === 'load' ) isLoaded = true;
      
      var listeners = listenermap[event.type];
      if( listeners ) {
        var stop = false;
        event.stopPropagation = stopImmediatePropagation = function() {
          stop = true;
        };
      
        listeners.forEach(function(listener) {
          if( !stop ) listener.call(self, event);
        });
      
        return event.defaultPrevented ? false : true;
      }
      return true;
    }
    return doc.dispatchEvent(event);
  };
  
  this.querySelector = function(selector) {
    return documentElement.querySelector(selector);
  };
  
  this.querySelectorAll = function(selector) {
    return documentElement.querySelectorAll(selector);
  };
};

module.exports = function(documentElement, URL) {
  VirtualDocument.prototype = document.implementation.createHTMLDocument('');
  return new VirtualDocument(documentElement, URL);
};