function ajax(options) {
  if( typeof options === 'string' ) options = {url:options};
  
  return {
    done: function(fn) {
      if( !options ) return fn(new Error('missing options'));
      if( !options.url ) return fn(new Error('missing url'));
      if( typeof options.url !== 'string' ) return fn(new Error('url must be a string: ' + typeof options.url));
      
      var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
      
      for(var key in options.headers ) {
        xhr.setRequestHeader(key, options.headers[key]);
      }
      
      if( options.query ) {
        options.url = options.url + '?' + ajax.toqry(options.query);
      }
      
      xhr.open(options.method || 'get', options.url, !options.sync);
      xhr.onreadystatechange = function(e) {
        if( this.readyState === 4 ) {
          if( this.status == 200 ) {
            var contentType = xhr.getResponseHeader('Content-Type');
            var data = this.responseXML || this.responseText;
            
            if( ~contentType.indexOf('/json') || options.type === 'json' ) data = JSON.parse(data);
            
            fn(null, data);
          } else if( this.readyState == 4 ) {
            fn(new Error('ajax load error: ' + this.status));
          }
        }
      };
      
      if( options.responseType) xhr.responseType = options.responseType;
      
      if( options.payload && typeof options.payload === 'object' ) {
        xhr.setRequestHeader('Content-Type', 'application/json');
        options.payload = JSON.stringify(options.payload);
        xhr.send(options.payload);
      } else if( typeof options.payload === 'string' ) {
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.send(options.payload);
      } else {
        xhr.send();
      }
      
      return ajax;
    }
  }
};

ajax.toqry = function(o) {
  if( !o || typeof(o) !== 'object' ) return '';
  
  var result = '';
  for(var k in o) {
    if( ~['string', 'number', 'boolean'].indexOf(typeof o[k]) ) {
      result += (result ? '' : '&') + k + '=' + encodeURIComponent(o[k]);
    }
  }
  
  return s;
}

ajax.get = function(url, query) {
  return ajax({
    method: 'get',
    url: url,
    query: query,
    cache: false
  });
};

ajax.post = function(url, payload) {
  return ajax({
    method: 'post',
    url: url,
    payload: payload,
    cache: false
  });
};

ajax.put = function(url, payload) {
  return ajax({
    method: 'put',
    url: url,
    payload: payload,
    cache: false
  });
};

ajax.delete = function(url, payload) {
  return ajax({
    method: 'delete',
    url: url,
    payload: payload,
    cache: false
  });
};

module.exports = ajax;