var domutil = require('./util/domutil.js');
var util = require('./util/util.js');
var Loader = require('./loader.js');

var defaults = {};

function Include(document) {
  if( !document ) throw new Error('[x-include] illegal arguments: missing document');
  if( !(this instanceof Include) ) throw new Error('[x-include] illegal state: must be instantiated');
  
  function normalize(href, doc) {
    if( !href ) return href;
    var a = document.createElement('a');
    a.href = href || '';
    return a.href;
  }
  
  var defines = {}, pagecache = {};
  
  this.defaults = defaults;
  
  this.define = function(name, src, options) {
    if( typeof options === 'string' ) options = {type:options};
    if( options && typeof options !== 'object' ) throw new TypeError('invalid options');
    
    options = options || {};
    options.src = src;
    defines[name] = options;
    return this;
  };
  
  this.import = function(src, done) {
    if( typeof done !== 'function' ) done = function(err) { if( err ) console.error('[x-include] import error', err); };
    if( typeof src !== 'string' ) return done(new TypeError('[x-include] src must be a string')) || this;
    return this.load({
      src: src,
      singleton: true,
      importStyles: true,
      evalScripts: true,
      fixLinks: false
    }, done);
  };
  
  this.load = function(options, done) {
    if( typeof done !== 'function' ) done = function(err) { if( err ) console.error('[x-include] load error', err); };
    if( !options ) return done(new TypeError('[x-include] missing options')) || this;
    if( typeof options === 'string' ) options = { src: options };
    if( !options.src ) return done(new TypeError('[x-include] missing src')) || this;
    
    options = util.mixin({}, defaults, defines[options.src], options);
    options.src = defines[options.src].src;
    var type = options.type = options.type || 'default';
    var target = options.target;
    
    var loader = Loader[type];
    if( !loader ) return done(new Error('[x-include] not found loader:' + (type || 'unknwon')));
    
    loader.load(options, function(err, result) {
      if( err ) return done(err);
      
      if( target ) {
        if( typeof target === 'string' ) target = document.querySelector(target);
        if( !target ) return done(new TypeError('[x-include] not found target element:' + options.target));
        if( !domutil.isElement(target) ) return done(new TypeError('[x-include] target must be an element'));
        
        var o = {};
        for(var k in options) o[k] = options[k];
        o.loaded = result;
        o.target = target;
        
        loader.render(o, function(err) {
          done(err, result);
        });
      } else {
        done(null, result);
      }
    });
    return this;
  };
  
  // events
  var self = this, listeners = {};
  function fire(type, detail) {
    (listeners[type] || []).forEach(function(listener) {
      listener.call(self, {
        type: type,
        detail: detail || {}
      });
    });
  }
  
  this.on = function(type, fn) {
    listeners[type] = listeners[type] || [];
    listeners[type].push(fn);
    return this;
  };
  
  this.once = function(type, fn) {
    var wrap = function(e) {
      body.off(type, wrap);
      return fn.call(this, e);
    };
    body.on(type, wrap);
    return this;
  };
  
  this.off = function(type, fn) {
    var fns = listeners[type];
    if( fns )
      for(var i;~(i = fns.indexOf(fn));) fns.splice(i, 1);
    
    return this;
  };
}

Include.prototype = {
  of: function(document) {
    return new Include(document);
  }
};

Include.loaders = Loader;

module.exports = new Include(window.document);
