{
  "name": "unreachable-branch-transform",
  "version": "0.5.1",
  "description": "Browserify transform to remove unreachable code",
  "keywords": [
    "browserify",
    "browserify-transform",
    "transform",
    "minify",
    "unreachable"
  ],
  "homepage": "https://github.com/zertosh/unreachable-branch-transform",
  "license": "MIT",
  "author": {
    "name": "Andres Suarez",
    "email": "zertosh@gmail.com"
  },
  "files": [
    "README.md",
    "index.js",
    "unreachableBranchTransformer.js"
  ],
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/zertosh/unreachable-branch-transform.git"
  },
  "dependencies": {
    "esmangle-evaluator": "^1.0.0",
    "recast": "^0.11.4"
  },
  "devDependencies": {
    "browserify": "^13.0.0",
    "tap": "^5.7.1"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "readme": "unreachable-branch-transform\n============================\n\n[![Build Status](https://travis-ci.org/zertosh/unreachable-branch-transform.svg?branch=master)](https://travis-ci.org/zertosh/unreachable-branch-transform)\n\nRemoves unreachable code branches in `if` statements, ternaries `?`, and logical operations `||` `&&`, where the test is determinable (like comparing two constants). This is similar to what [UglifyJS](https://github.com/mishoo/UglifyJS2)'s \"dead_code\" compressor option does, but without the extra code transformations.\n\nWhen combined with something like [envify](https://github.com/hughsk/envify) and [browserify](https://github.com/substack/node-browserify), you can perform conditional `require` calls without including more code than you need.\n\n#### Install ####\n\n```bash\nnpm install unreachable-branch-transform\n```\n\n#### Example outputs #####\n\n```js\n// original \nvar transport = process.env.TARGET === 'client' ? require('ajax') : require('fs');\n\n// after envify\nvar transport = 'server' === 'client' ? require('ajax') : require('fs');\n// then after unreachable-branch-transform\nvar transport = require('fs');\n```\n\n```js\n// original\nif (process.env.NODE_ENV === 'development') {\n  console.log('in dev mode');\n} else {\n  console.log('in some other mode');\n}\n\n// after envify\nif ('production' === 'development') {\n  console.log('in dev mode');\n} else {\n  console.log('in some other mode');\n}\n\n// then after unreachable-branch-transform\n{\n  console.log('in some other mode');\n}\n```\n\n#### Usage\n\n\n\n* `unreachable-branch-transform` can be used a [browserify](https://github.com/substack/node-browserify) transform. Just include it like any other transform.\n* `unreachable-branch-transform` can also be used on raw code by calling the `transform` function exposed by requiring the package.\n\n#### Frequently asked questions ####\n\n##### Why are `undefined` equality references not removed?\n\nIf you have a branch with the format\n\n```javascript\nif (undefined === 'production') {\n  /* ... */\n}\n```\n\nit will not be removed. Unfortunately, `undefined` is _not_ a constant in older browser runtimes and can be reassigned. In this case, it could be possible that `undefined` does indeed equal `'production`'.\n\nCredit\n------\n`esmangle-evaluator` is from the [esmangle](https://github.com/Constellation/esmangle) project.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zertosh/unreachable-branch-transform/issues"
  },
  "_id": "unreachable-branch-transform@0.5.1",
  "_shasum": "5e0a5da810b4f4cc6866afc28b59aa6e8c84db5d",
  "_resolved": "https://registry.npmjs.org/unreachable-branch-transform/-/unreachable-branch-transform-0.5.1.tgz",
  "_from": "https://registry.npmjs.org/unreachable-branch-transform/-/unreachable-branch-transform-0.5.1.tgz"
}
